{"version":3,"file":"static/js/639.4b5e0fbc.chunk.js","mappings":"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","sources":["components/rangeInput/RangeInput.js","components/dropdownFilter/DropdownFilter.js","components/company/list/CompanyList.js"],"sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Button, Dropdown, TextInput } from 'flowbite-react';\r\n\r\nimport CommonUtil from '../../utils/commonUtil';\r\n\r\nimport './RangeInput.css';\r\n\r\nfunction RangeInput(props) {\r\n    const { from, to, onApply } = props;\r\n    const [_from, setFrom] = useState();\r\n    const [_to, setTo] = useState();\r\n\r\n    function handleInput(value, setFn) {\r\n        if (/^[0-9]*$/.test(value)) {\r\n            setFn((prev) => (prev ?? '') + value);\r\n        } else if (value === 'Backspace') {\r\n            setFn((prev) => prev.toString().slice(0, -1));\r\n        }\r\n    }\r\n\r\n    const dropdownDisplay = useMemo(() => {\r\n        return CommonUtil.isFalsyIncludeZero(from) &&\r\n            CommonUtil.isFalsyIncludeZero(to)\r\n            ? 'Market Cap'\r\n            : `${from && from >= 0 ? from.toLocaleString() : 'from'} - ${\r\n                  to && to >= 0 ? to.toLocaleString() : 'to'\r\n              }`;\r\n    }, [from, to]);\r\n\r\n    useEffect(() => setFrom(from || ''), [from]);\r\n    useEffect(() => setTo(to || ''), [to]);\r\n\r\n    return (\r\n        <>\r\n            <Dropdown dismissOnClick={true} label={dropdownDisplay}>\r\n                <div id={`range-input-menu`} className=\"p-3\">\r\n                    <div className=\"flex items-center\">\r\n                        <TextInput\r\n                            placeholder=\"From\"\r\n                            defaultValue={_from || ''}\r\n                            onKeyUp={(e) => handleInput(e.key, setFrom)}\r\n                            className=\"range\"\r\n                        />\r\n                        <span className=\"mx-1\"> — </span>\r\n                        <TextInput\r\n                            placeholder=\"To\"\r\n                            defaultValue={_to || ''}\r\n                            onKeyUp={(e) => handleInput(e.key, setTo)}\r\n                            className=\"range\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between mt-3\">\r\n                        <a\r\n                            href=\"\"\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                setFrom(0);\r\n                                setTo(0);\r\n                                onApply(0, 0);\r\n                            }}\r\n                        >\r\n                            Clear\r\n                        </a>\r\n                        <Button\r\n                            onClick={() => {\r\n                                onApply(+_from, +_to);\r\n                            }}\r\n                            className=\"apply\"\r\n                        >\r\n                            Apply\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Dropdown>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default RangeInput;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport { Button, Dropdown } from 'flowbite-react';\r\nimport { useCallback, useMemo, useState } from 'react';\r\n\r\nfunction DropdownFilter(props) {\r\n    const { filters, onApply } = props;\r\n    const [_filters, setFilters] = useState([...filters]);\r\n\r\n    const getSelectCount = useCallback((filters) => {\r\n        let isSelectAll = false;\r\n        let countDeselect = 0;\r\n        let countSelect = 0;\r\n\r\n        for (let f of filters) {\r\n            if (f.value === 'all') {\r\n                if (f.isActive) {\r\n                    isSelectAll = true;\r\n                }\r\n                continue;\r\n            } else if (f.isActive) {\r\n                countSelect += 1;\r\n            } else {\r\n                countDeselect += 1;\r\n            }\r\n        }\r\n        let isDeselectAll = countDeselect === filters.length - 1;\r\n        isSelectAll = isSelectAll || countSelect === filters.length - 1;\r\n\r\n        return { isSelectAll, isDeselectAll };\r\n    }, []);\r\n\r\n    const dropdownDisplay = useMemo(() => {\r\n        const { isSelectAll } = getSelectCount(filters);\r\n        if (isSelectAll) {\r\n            return filters\r\n                .filter((f) => f.value !== 'all')\r\n                .map((f2) => f2.display)\r\n                .join(', ');\r\n        } else {\r\n            return filters\r\n                .filter((f) => f.isActive)\r\n                .map((f2) => f2.display)\r\n                .join(', ');\r\n        }\r\n    }, [filters]);\r\n\r\n    function handlePostSelect() {\r\n        const { isSelectAll, isDeselectAll } = getSelectCount(_filters);\r\n        let temp;\r\n        if (isSelectAll) {\r\n            const result = _filters.map((p) => ({\r\n                ...p,\r\n                isActive: p.value === 'all',\r\n            }));\r\n            temp = result;\r\n\r\n            setFilters(result);\r\n        } else {\r\n            const result = _filters.map((p) => ({\r\n                ...p,\r\n                isActive: isDeselectAll\r\n                    ? p.isDefault\r\n                    : p.value === 'all'\r\n                    ? false\r\n                    : p.isActive,\r\n            }));\r\n            temp = result;\r\n\r\n            setFilters(result);\r\n        }\r\n\r\n        onApply(temp);\r\n    }\r\n\r\n    return (\r\n        <Dropdown\r\n            dismissOnClick={true}\r\n            label={dropdownDisplay}\r\n            onBlur={() => setFilters([...filters])}\r\n        >\r\n            <div className=\"p-3\">\r\n                <div className=\"flex flex-row gap-1\">\r\n                    {_filters.map((filter, index) => (\r\n                        <Button\r\n                            color={filter.isActive ? undefined : 'light'}\r\n                            onClick={() => {\r\n                                setFilters((prev) =>\r\n                                    prev.map((p, i) => ({\r\n                                        ...p,\r\n                                        isActive:\r\n                                            p.value === 'all' && p.isActive\r\n                                                ? false\r\n                                                : index === i\r\n                                                ? !p.isActive\r\n                                                : p.isActive,\r\n                                    }))\r\n                                );\r\n                            }}\r\n                            key={`dropdown-filter-${index}`}\r\n                        >\r\n                            {filter.display}\r\n                        </Button>\r\n                    ))}\r\n                </div>\r\n                <div className=\"flex items-center justify-between mt-3\">\r\n                    <a\r\n                        href=\"\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            const newValue = _filters.map((f) => ({\r\n                                ...f,\r\n                                isActive: f.value === 'all',\r\n                            }));\r\n                            setFilters(newValue);\r\n                            onApply(newValue);\r\n                        }}\r\n                    >\r\n                        Clear\r\n                    </a>\r\n                    <Button\r\n                        onClick={() => {\r\n                            handlePostSelect();\r\n                        }}\r\n                        className=\"apply\"\r\n                    >\r\n                        Apply\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </Dropdown>\r\n    );\r\n}\r\n\r\nexport default DropdownFilter;\r\n","import { useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { Card, Table, TextInput } from 'flowbite-react';\r\nimport { FiArrowDown, FiArrowUp, FiSearch } from 'react-icons/fi';\r\n\r\nimport { useAppContext } from '../../../context/appContext';\r\nimport companyService from '../../../services/companyService';\r\n\r\nimport Loading from '../../loading/Loading';\r\nimport RangeInput from '../../rangeInput/RangeInput';\r\nimport DropdownFilter from '../../dropdownFilter/DropdownFilter';\r\n\r\nimport './CompanyList.css';\r\n\r\nconst defaultSorting = {\r\n    isActive: false,\r\n    direction: 'desc',\r\n};\r\n\r\nfunction CompanyList() {\r\n    const navigate = useNavigate();\r\n    const { isMobile, setDisplayBackBtn } = useAppContext();\r\n    const [companyList, setCompanyList] = useState([]);\r\n    const [filter, setFilter] = useState({\r\n        sort: {\r\n            companyName: {\r\n                display: 'Company Name',\r\n                isActive: true,\r\n                direction: 'desc',\r\n            },\r\n            marketCap: {\r\n                display: 'Market Cap',\r\n                isActive: false,\r\n                direction: 'asc',\r\n            },\r\n        },\r\n        marketCap: {\r\n            from: null,\r\n            to: null,\r\n        },\r\n        search: '',\r\n        fType: [\r\n            {\r\n                display: 'All',\r\n                value: 'all',\r\n                isActive: false,\r\n            },\r\n            {\r\n                display: 'Type S',\r\n                value: 'S',\r\n                isActive: true,\r\n                isDefault: true,\r\n            },\r\n            {\r\n                display: 'Type A',\r\n                value: 'A',\r\n                isActive: false,\r\n            },\r\n        ],\r\n    });\r\n    const [searchKeyword, setSearchKeyword] = useState('');\r\n    const [isProcessing, setIsProcessing] = useState(true);\r\n\r\n    function onClickSorting(field) {\r\n        const tempSorting = { ...filter.sort };\r\n        Object.keys(tempSorting).forEach((sortField) => {\r\n            if (sortField === field) {\r\n                if (tempSorting[field].isActive) {\r\n                    tempSorting[field].direction =\r\n                        tempSorting[field].direction === 'asc' ? 'desc' : 'asc';\r\n                } else {\r\n                    tempSorting[field].isActive = true;\r\n                }\r\n            } else {\r\n                tempSorting[sortField] = {\r\n                    ...tempSorting[sortField],\r\n                    ...defaultSorting,\r\n                };\r\n            }\r\n        });\r\n        setFilter((prev) => ({ ...prev, sort: tempSorting }));\r\n    }\r\n\r\n    function navigateToDetail(companyId) {\r\n        navigate(`/company/detail/${companyId}`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setDisplayBackBtn(false);\r\n        setIsProcessing(true);\r\n\r\n        async function fetch() {\r\n            await companyService\r\n                .getList()\r\n                .then((data) => setCompanyList(data))\r\n                .finally(() => setIsProcessing(false));\r\n        }\r\n\r\n        fetch();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setIsProcessing(true);\r\n        async function fetch() {\r\n            let _sort = { field: undefined, direction: undefined };\r\n            for (let s of Object.keys(filter.sort)) {\r\n                if (filter.sort[s].isActive) {\r\n                    _sort.field = s;\r\n                    _sort.direction = filter.sort[s].direction;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            let _fType = [];\r\n            let isSelectAllFType = false;\r\n            for (let f of filter.fType) {\r\n                if (f.value === 'all') {\r\n                    isSelectAllFType = f.isActive;\r\n                }\r\n                if (f.isActive || isSelectAllFType) {\r\n                    _fType.push(f.value);\r\n                }\r\n            }\r\n            const _filter = {\r\n                ...filter,\r\n                sort: _sort,\r\n                fType: _fType,\r\n            };\r\n\r\n            await companyService\r\n                .search(_filter)\r\n                .then((data) => setCompanyList(data))\r\n                .finally(() => setIsProcessing(false));\r\n        }\r\n        fetch();\r\n    }, [filter]);\r\n\r\n    return (\r\n        <>\r\n            <Card className=\"overflow-scroll sm:overflow-auto\">\r\n                <div className=\"main-filter\">\r\n                    <TextInput\r\n                        icon={FiSearch}\r\n                        value={searchKeyword ?? ''}\r\n                        placeholder=\"Search by name or relavant keyword\"\r\n                        onChange={(e) => {\r\n                            setSearchKeyword(e.target.value);\r\n                        }}\r\n                        onKeyUp={(e) => {\r\n                            if (e.key === 'Enter') {\r\n                                setFilter((prev) => ({\r\n                                    ...prev,\r\n                                    search: searchKeyword,\r\n                                }));\r\n                            }\r\n                        }}\r\n                        className=\"company-input-search\"\r\n                    />\r\n                    <div className=\"sub-filter\">\r\n                        <DropdownFilter\r\n                            filters={filter.fType}\r\n                            onApply={(values) => {\r\n                                setFilter((prev) => ({\r\n                                    ...prev,\r\n                                    fType: values,\r\n                                }));\r\n                            }}\r\n                        />\r\n                        <RangeInput\r\n                            from={filter.marketCap.from}\r\n                            to={filter.marketCap.to}\r\n                            onApply={(from, to) => {\r\n                                setFilter((prev) => ({\r\n                                    ...prev,\r\n                                    marketCap: {\r\n                                        from,\r\n                                        to,\r\n                                    },\r\n                                }));\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"content\">\r\n                    {companyList && companyList.length > 0 ? (\r\n                        <Table hoverable>\r\n                            <Table.Head>\r\n                                {isMobile && <Table.HeadCell></Table.HeadCell>}\r\n                                <TableHeaderSortable\r\n                                    {...filter.sort.companyName}\r\n                                    onClickSorting={() =>\r\n                                        onClickSorting('companyName')\r\n                                    }\r\n                                />\r\n                                <Table.HeadCell className=\"text-center\">\r\n                                    F Type\r\n                                </Table.HeadCell>\r\n                                <TableHeaderSortable\r\n                                    {...filter.sort.marketCap}\r\n                                    onClickSorting={() =>\r\n                                        onClickSorting('marketCap')\r\n                                    }\r\n                                    className=\"justify-end\"\r\n                                />\r\n                                {!isMobile && (\r\n                                    <Table.HeadCell>Actions</Table.HeadCell>\r\n                                )}\r\n                            </Table.Head>\r\n                            <Table.Body className=\"divide-y\">\r\n                                {companyList.length > 0 &&\r\n                                    companyList.map((company, index) => (\r\n                                        <Table.Row\r\n                                            className=\"bg-white\"\r\n                                            key={`company-list-${index}`}\r\n                                            onClick={() =>\r\n                                                navigateToDetail(company.id)\r\n                                            }\r\n                                        >\r\n                                            {isMobile && (\r\n                                                <Table.Cell className=\"whitespace-nowrap px-4\">\r\n                                                    <div className=\"flex flex-col text-center\">\r\n                                                        <img\r\n                                                            src=\"/favicon.ico\"\r\n                                                            className=\"company-logo\"\r\n                                                            alt=\"company logo\"\r\n                                                        />\r\n                                                        <small>\r\n                                                            <Link\r\n                                                                to={`/company/detail/${company.id}`}\r\n                                                            >\r\n                                                                See info\r\n                                                            </Link>\r\n                                                        </small>\r\n                                                        <small>\r\n                                                            <Link\r\n                                                                onClick={(\r\n                                                                    e\r\n                                                                ) => {\r\n                                                                    e.stopPropagation();\r\n                                                                    window.open(\r\n                                                                        company.url\r\n                                                                    );\r\n                                                                }}\r\n                                                            >\r\n                                                                Visit site\r\n                                                            </Link>\r\n                                                        </small>\r\n                                                    </div>\r\n                                                </Table.Cell>\r\n                                            )}\r\n                                            <Table.Cell>\r\n                                                <div className=\"flex\">\r\n                                                    {!isMobile && (\r\n                                                        <img\r\n                                                            src=\"/favicon.ico\"\r\n                                                            className=\"company-logo\"\r\n                                                            alt=\"company logo\"\r\n                                                        />\r\n                                                    )}\r\n                                                    <div>\r\n                                                        <h3>\r\n                                                            {company.aliasName}\r\n                                                        </h3>\r\n                                                        <small>\r\n                                                            {company.name['en']}\r\n                                                        </small>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Table.Cell>\r\n                                            <Table.Cell className=\"text-center\">\r\n                                                {company.fType}\r\n                                            </Table.Cell>\r\n                                            <Table.Cell className=\"text-right\">\r\n                                                {company.marketCapDisplay ||\r\n                                                    'NA'}\r\n                                            </Table.Cell>\r\n                                            {!isMobile && (\r\n                                                <Table.Cell>\r\n                                                    <div className=\"flex gap-1\">\r\n                                                        <Link\r\n                                                            to={`/company/detail/${company.id}`}\r\n                                                        >\r\n                                                            See info\r\n                                                        </Link>\r\n                                                        {' | '}\r\n                                                        <Link\r\n                                                            onClick={(e) => {\r\n                                                                e.stopPropagation();\r\n                                                                window.open(\r\n                                                                    company.url\r\n                                                                );\r\n                                                            }}\r\n                                                        >\r\n                                                            Visit site\r\n                                                        </Link>\r\n                                                    </div>\r\n                                                </Table.Cell>\r\n                                            )}\r\n                                        </Table.Row>\r\n                                    ))}\r\n                            </Table.Body>\r\n                        </Table>\r\n                    ) : (\r\n                        <>\r\n                            {!isProcessing && (\r\n                                <div className=\"no-data\">There is no data</div>\r\n                            )}\r\n                        </>\r\n                    )}\r\n\r\n                    {isProcessing && <Loading />}\r\n                </div>\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction TableHeaderSortable(props) {\r\n    const { display, direction, isActive, className, onClickSorting } = props;\r\n\r\n    return (\r\n        <Table.HeadCell\r\n            className={`flex hover:underline ${className || ''}`}\r\n            onClick={() => onClickSorting()}\r\n        >\r\n            {display}\r\n            <span className={`table-header-icon ${isActive ? 'active' : ''}`}>\r\n                {direction === 'asc' ? <FiArrowUp /> : <FiArrowDown />}\r\n            </span>\r\n        </Table.HeadCell>\r\n    );\r\n}\r\n\r\nexport default CompanyList;\r\n"],"names":["props","from","to","onApply","_useState","useState","_useState2","_slicedToArray","_from","setFrom","_useState3","_useState4","_to","setTo","handleInput","value","setFn","test","prev","toString","slice","dropdownDisplay","useMemo","CommonUtil","isFalsyIncludeZero","concat","toLocaleString","useEffect","_jsx","_Fragment","children","Dropdown","dismissOnClick","label","_jsxs","id","className","TextInput","placeholder","defaultValue","onKeyUp","e","key","href","onClick","preventDefault","Button","filters","_toConsumableArray","_filters","setFilters","getSelectCount","useCallback","_step","isSelectAll","countDeselect","countSelect","_iterator","_createForOfIteratorHelper","s","n","done","f","isActive","err","isDeselectAll","length","filter","map","f2","display","join","onBlur","index","color","undefined","p","i","_objectSpread","newValue","temp","_getSelectCount2","result","isDefault","handlePostSelect","defaultSorting","direction","TableHeaderSortable","onClickSorting","Table","HeadCell","FiArrowUp","FiArrowDown","navigate","useNavigate","_useAppContext","useAppContext","isMobile","setDisplayBackBtn","companyList","setCompanyList","sort","companyName","marketCap","search","fType","setFilter","_useState5","_useState6","searchKeyword","setSearchKeyword","_useState7","_useState8","isProcessing","setIsProcessing","field","tempSorting","Object","keys","forEach","sortField","_fetch","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","next","companyService","getList","then","data","finally","stop","apply","arguments","fetch","_fetch2","_callee2","_sort","_i","_Object$keys","_fType","isSelectAllFType","_filter","_context2","abrupt","push","Card","icon","FiSearch","onChange","target","DropdownFilter","values","RangeInput","hoverable","Head","Body","company","Row","companyId","Cell","src","alt","Link","stopPropagation","window","open","url","aliasName","name","marketCapDisplay","Loading"],"sourceRoot":""}